import io
import datetime

from crewai import Task, Crew, Process

from tech_agents.architect_designer import architect_designer
from tech_agents.code_generator import code_generator
from tech_agents.code_reviewer import code_reviewer
from tech_agents.deployment_manager import deployment_manager
from tech_agents.documentation_specialist import documentation_specialist
from tech_agents.requirement_specifier import requirement_specifier
from tech_agents.task_analyzer import task_analyzer
from tech_agents.test_engineer import test_engineer

# Read task description from file
with io.open('development-task.txt', 'r', encoding='utf-8') as task_description_file:
    task_description = task_description_file.read()

# Define the tasks
understand_task = Task(
    description=f"Parse and understand the task description, break it down into actionable items, and create a "
                f"development plan:\n\n{task_description}",
    agent=task_analyzer,
    expected_output="Detailed steps and a development plan."
)

specify_requirements = Task(
    description="Convert the detailed tasks from 'understand_task' into clear and concise requirements and "
                "specifications.",
    agent=requirement_specifier,
    expected_output="Technical specifications that are unambiguous, consistent, and testable."
)

design_architecture = Task(
    description="Design the system architecture based on the requirements from 'specify_requirements'.",
    agent=architect_designer,
    expected_output="High-level architectural diagrams and system design."
)

generate_code = Task(
    description="Write the code based on the system design and architecture from 'design_architecture'.",
    agent=code_generator,
    expected_output="Correct and efficient code."
)

review_code = Task(
    description="Review the code generated in 'generate_code' for errors, optimize it, and ensure it meets quality "
                "standards.",
    agent=code_reviewer,
    expected_output="Feedback, optimizations, and quality assurance."
)

generate_unit_tests = Task(
    description="Create actual unit tests based on the code generated by the Code Generator.",
    agent=test_engineer,
    expected_output="Real unit tests to validate the functionality and performance of the generated code."
)

# Define the final documentation task
document_all_steps = Task(
    description="Generate comprehensive documentation for all the steps performed in the development process, "
                "including outputs from all previous tasks. The documentation must include the code generated, "
                "the libraries"
                "needed, the system architecture, and the test cases including the generated unit tests.",
    agent=documentation_specialist,
    expected_output="Final documentation including all steps, code, libraries, architecture, and test cases in "
                    "Markdown format."
)

# Assemble the Crew
crew = Crew(
    agents=[task_analyzer, requirement_specifier, architect_designer, code_generator, code_reviewer, test_engineer,
            documentation_specialist, deployment_manager],
    tasks=[understand_task, specify_requirements, design_architecture, generate_code, review_code, generate_unit_tests,
           document_all_steps],
    verbose=2,
    process=Process.sequential
)

# Kickoff the CrewAI process
output = crew.kickoff()

# Write the output to a Markdown file with a timestamp
timestamp = datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")
output_filename = f"solutions/output-{timestamp}.md"
with io.open(output_filename, 'w', encoding='utf-8') as output_file:
    if isinstance(output, dict):
        for task_name, task_output in output.items():
            output_file.write(f"## {task_name}\n\n")
            output_file.write(f"{task_output}\n\n")

        # Specifically include code, libraries, architecture, and tests
        output_file.write("## Implementation Code\n\n")
        output_file.write(output.get('generate_code', 'Code not available') + "\n\n")

        output_file.write("## Required Libraries\n\n")
        output_file.write(output.get('specify_requirements', 'Libraries not specified') + "\n\n")

        output_file.write("## System Architecture\n\n")
        output_file.write(output.get('design_architecture', 'Architecture not specified') + "\n\n")

        output_file.write("## Unit Tests\n\n")
        output_file.write(output.get('generate_unit_tests', 'Unit tests not available') + "\n\n")
    else:
        output_file.write(output)  # Write the output as string if not a dictionary

# Print confirmation
print(f"Output written to '{output_filename}'")